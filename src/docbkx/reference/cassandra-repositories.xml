<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="cassandra.repositories">
  <title>Cassandra repositories</title>

  <section id="cassandra-repo-intro">
    <title>Introduction</title>

    <para>This chapter will point out the specialties for repository support
    for Cassandra. This builds on the core repository support explained in <xref
    linkend="repositories"/>. So make sure you've got a sound understanding of
    the basic concepts explained there.</para>
  </section>

  <section id="cassandra-repo-usage">
    <title>Usage</title>

    <para>To access domain entities stored in a Cassandra you can leverage our
    sophisticated repository support that eases implementing those quite
    significantly. To do so, simply create an interface for your
    repository:</para>
    <para>TODO</para>
  </section>

  <section id="cassandradb.repositories.queries">
    <title>Query methods</title>

    <section id="cassandradb.repositories.queries.delete">
      <title>Repository delete queries</title>
    </section>
  </section>

  <section id="cassandradb.repositories.misc">
    <title>Miscellaneous</title>

    <section id="cassandradb.repositories.misc.cdi-integration">
      <title>CDI Integration</title>

      <para>The Spring Data Cassandra CDI extension will pick up the
          <classname>CassandraTemplate</classname> available as CDI bean and create a proxy for a
        Spring Data repository whenever an bean of a repository type is requested by the container.
        Thus obtaining an instance of a Spring Data repository is a matter of declaring an
          <code>@Inject</code>-ed property:</para>

      <programlisting language="java">class RepositoryClient {

  @Inject
  PersonRepository repository;

  public void businessMethod() {

    List&lt;Person&gt; people = repository.findAll();
  }
}</programlisting>
    </section>
  </section>
</chapter>
