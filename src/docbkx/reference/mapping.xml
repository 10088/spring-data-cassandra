<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="mapping-chapter">
	<title>Mapping</title>

	<para>
		Rich mapping support is provided by the
		<classname>CassandraMappingConverter</classname>
		.
		<classname>CassandraMappingConverter</classname>
		has a rich metadata model that
		provides a full feature set of
		functionality to map domain objects to
		CQL Tables. The mapping metadata
		model is populated using annotations
		on your domain objects. However,
		the infrastructure is not limited to
		using
		annotations as the only
		source of metadata information. The
		<classname>CassandraMappingConverter</classname>
		also allows you to map objects
		to documents without providing any
		additional metadata, by following a
		set
		of conventions.
	</para>

	<para>In this section we will describe the features of the
		CassandraMappingConverter. How to use conventions for mapping objects
		to
		documents and how to override those conventions with annotation
		based
		mapping metadata.
	</para>

	<section id="mapping-conventions">
		<title>Convention based Mapping</title>

		<para>
			<classname>CassandraMappingConverter</classname>
			has a few conventions
			for mapping objects to CQL Tables when no
			additional mapping metadata is
			provided. The conventions are:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					The short Java class name is mapped to the table name in
					the
					following manner. The class
					'
					<classname>com.bigbank.SavingsAccount</classname>
					' maps to
					'
					<literal>savings_account</literal>
					' table name.
				</para>
			</listitem>

			<listitem>
				<para>The converter will use any Spring Converters registered with
					it
					to override the default mapping of object properties to document
					field/values.
				</para>
			</listitem>

			<listitem>
				<para>The fields of an object are used to convert to and from fields
					in the document. Public JavaBean properties are not used.
				</para>
			</listitem>

		</itemizedlist>

		<section id="mapping.conventions.id-field">
			<title>How the CQL Composite Primary Key fields are handled in the
				mapping layer
			</title>
			<para>TODO</para>
		</section>

		<section id="mapping-configuration">
			<title>Mapping Configuration</title>

			<para>
				Unless explicitly configured, an instance of
				<classname>CassandraMappingConverter</classname>
				is created by default when
				creating a
				<classname>CassandraTemplate</classname>
				. You can create your own
				instance of the
				<classname>MappingCassandraConverter</classname>
				so as to tell it where to scan the classpath at startup your domain
				classes in order
				to extract metadata and construct indexes. Also, by
				creating your own
				instance you can register Spring converters to use
				for mapping specific
				classes to and from the database.
			</para>

			<para>
				You can configure the
				<classname>CassandraMappingConverter</classname>
				and CassandraTemplate
				either using Java or XML based metadata. Here
				is an
				example using Spring's
				Java based configuration
			</para>

			<example>
				<title>@Configuration class to configure Cassandra mapping support
				</title>
				<para>TODO</para>
			</example>
			<example>
				<title>XML schema to configure Cassandra mapping support</title>
				<para>TODO</para>
			</example>

		</section>
	</section>
</chapter>
